"""
Application Web Am√©lior√©e pour la Restauration et Colorisation de Vid√©os
Interface moderne avec fonctionnalit√©s avanc√©es
"""

import streamlit as st
import cv2
import numpy as np
from PIL import Image
import tempfile
import os
import json
from datetime import datetime
import plotly.graph_objects as go
import plotly.express as px
from streamlit_option_menu import option_menu
import base64
from typing import Dict, List, Any, Optional

# Imports des modules de colorisation
try:
    from colorization.ai_model import AIColorizer
    from colorization.classical_methods import ClassicalColorizer, COCO_CLASSES
    from colorization.filters import apply_denoising
    from colorization.utils import calculate_metrics, save_video, ensure_directory
except ImportError as e:
    st.error(f"Erreur d'importation des modules: {e}")

# Configuration
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
OUTPUT_DIR = os.path.join(CURRENT_DIR, 'static', 'output')
HISTORY_DIR = os.path.join(CURRENT_DIR, 'static', 'history')

# Assurer l'existence des r√©pertoires
for directory in [OUTPUT_DIR, HISTORY_DIR]:
    os.makedirs(directory, exist_ok=True)

# Configuration de la page
st.set_page_config(
    page_title="Video AI Colorization Studio",
    page_icon="üé®",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour une interface moderne
def load_custom_css():
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
        color: white;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #667eea;
    }
    
    .processing-card {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid #e9ecef;
        margin: 1rem 0;
    }
    
    .success-card {
        background: #d4edda;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    
    .stProgress > div > div > div > div {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }
    
    .video-container {
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .sidebar .sidebar-content {
        background: #f8f9fa;
    }
    
    /* Animation pour les boutons */
    .stButton > button {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 5px;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    </style>
    """, unsafe_allow_html=True)

def save_processing_history(video_name: str, method: str, metrics: Dict[str, float], output_path: str):
    """Sauvegarde l'historique des traitements"""
    history_file = os.path.join(HISTORY_DIR, 'processing_history.json')
    
    history_entry = {
        'timestamp': datetime.now().isoformat(),
        'video_name': video_name,
        'method': method,
        'metrics': metrics,
        'output_path': output_path
    }
    
    # Charger l'historique existant
    history = []
    if os.path.exists(history_file):
        try:
            with open(history_file, 'r', encoding='utf-8') as f:
                history = json.load(f)
        except:
            history = []
    
    # Ajouter la nouvelle entr√©e
    history.append(history_entry)
    
    # Limiter √† 50 entr√©es max
    history = history[-50:]
    
    # Sauvegarder
    with open(history_file, 'w', encoding='utf-8') as f:
        json.dump(history, f, indent=2, ensure_ascii=False)

def load_processing_history() -> List[Dict]:
    """Charge l'historique des traitements"""
    history_file = os.path.join(HISTORY_DIR, 'processing_history.json')
    if os.path.exists(history_file):
        try:
            with open(history_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return []
    return []

def display_video_info(video_path: str):
    """Affiche les informations de la vid√©o"""
    cap = cv2.VideoCapture(video_path)
    fps = cap.get(cv2.CAP_PROP_FPS)
    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    duration = frame_count / fps if fps > 0 else 0
    cap.release()
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("R√©solution", f"{width}√ó{height}")
    with col2:
        st.metric("FPS", f"{fps:.1f}")
    with col3:
        st.metric("Dur√©e", f"{duration:.1f}s")
    with col4:
        st.metric("Frames", f"{frame_count}")

def create_comparison_chart(metrics_history: List[Dict]):
    """Cr√©e un graphique de comparaison des m√©triques"""
    if not metrics_history:
        return None
    
    # Pr√©parer les donn√©es
    timestamps = []
    psnr_values = []
    ssim_values = []
    methods = []
    
    for entry in metrics_history[-10:]:  # Derni√®res 10 entr√©es
        if 'metrics' in entry and entry['metrics']:
            timestamps.append(entry['timestamp'][:19])  # Format datetime
            psnr_values.append(entry['metrics'].get('psnr', 0))
            ssim_values.append(entry['metrics'].get('ssim', 0))
            methods.append(entry['method'])
    
    if not timestamps:
        return None
    
    # Cr√©er le graphique
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=timestamps,
        y=psnr_values,
        mode='lines+markers',
        name='PSNR',
        line=dict(color='#667eea', width=3),
        marker=dict(size=8)
    ))
    
    # Axe secondaire pour SSIM
    fig.add_trace(go.Scatter(
        x=timestamps,
        y=[v * 100 for v in ssim_values],  # Multiplier par 100 pour la visualisation
        mode='lines+markers',
        name='SSIM √ó100',
        line=dict(color='#764ba2', width=3),
        marker=dict(size=8),
        yaxis='y2'
    ))
    
    fig.update_layout(
        title='√âvolution des M√©triques de Qualit√©',
        xaxis_title='Timestamp',
        yaxis_title='PSNR (dB)',
        yaxis2=dict(
            title='SSIM √ó100',
            overlaying='y',
            side='right'
        ),
        hovermode='x unified',
        template='plotly_white',
        height=400
    )
    
    return fig

def render_main_interface():
    """Interface principale de colorisation"""
    # En-t√™te principal
    st.markdown("""
    <div class="main-header">
        <h1>üé® Video AI Colorization Studio</h1>
        <p>Restaurez et colorisez vos vid√©os en noir et blanc avec l'IA</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Upload de fichier avec glisser-d√©poser am√©lior√©
    uploaded_file = st.file_uploader(
        "üìÅ Glissez-d√©posez votre vid√©o en noir et blanc",
        type=['mp4', 'avi', 'mov', 'mkv'],
        help="Formats support√©s: MP4, AVI, MOV, MKV (Max: 200MB)"
    )
    
    if uploaded_file is not None:
        # Sauvegarder temporairement
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as tmp_file:
            tmp_file.write(uploaded_file.read())
            video_path = tmp_file.name
        
        st.session_state.original_video = video_path
        st.session_state.video_name = uploaded_file.name
        
        # Afficher la vid√©o originale avec informations
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.subheader("üìπ Vid√©o Originale")
            with st.container():
                st.markdown('<div class="video-container">', unsafe_allow_html=True)
                st.video(video_path)
                st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.subheader("üìä Informations")
            display_video_info(video_path)
        
        # Interface de traitement
        st.markdown("---")
        render_processing_interface(video_path)

def render_processing_interface(video_path: str):
    """Interface de traitement avec options avanc√©es"""
    st.subheader("üîß Options de Traitement")
    
    # Onglets pour diff√©rentes m√©thodes
    tab1, tab2, tab3 = st.tabs(["ü§ñ IA Avanc√©e", "üé® Colorisation Classique", "üîß Pr√©processing"])
    
    with tab1:
        render_ai_colorization_tab(video_path)
    
    with tab2:
        render_classical_colorization_tab(video_path)
    
    with tab3:
        render_preprocessing_tab(video_path)

def render_ai_colorization_tab(video_path: str):
    """Onglet de colorisation IA"""
    st.markdown("""
    <div class="processing-card">
        <h4>üß† Colorisation par Intelligence Artificielle</h4>
        <p>Utilise des mod√®les GAN pr√©-entra√Æn√©s pour une colorisation automatique r√©aliste.</p>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        model_type = st.selectbox(
            "Mod√®le IA",
            ["DeOldify (Stable)", "DeOldify (Artistic)", "GAN Custom"],
            help="DeOldify Stable: Meilleur pour les visages et personnes\nDeOldify Artistic: Plus cr√©atif pour les paysages"
        )
        
        quality = st.select_slider(
            "Qualit√© de rendu",
            options=["Rapide", "√âquilibr√©", "Haute qualit√©"],
            value="√âquilibr√©"
        )
    
    with col2:
        temporal_consistency = st.checkbox(
            "Coh√©rence temporelle",
            value=True,
            help="Am√©liore la consistance des couleurs entre les frames"
        )
        
        enhance_faces = st.checkbox(
            "Am√©lioration des visages",
            value=False,
            help="Optimisation sp√©ciale pour les visages d√©tect√©s"
        )
    
    # Options avanc√©es
    with st.expander("‚öôÔ∏è Param√®tres Avanc√©s"):
        batch_size = st.slider("Taille de batch", 1, 8, 4, help="Plus √©lev√© = plus rapide mais plus de m√©moire")
        color_intensity = st.slider("Intensit√© des couleurs", 0.5, 2.0, 1.0, 0.1)
        saturation_boost = st.slider("Boost de saturation", 0.8, 1.5, 1.0, 0.1)
    
    if st.button("üöÄ Lancer la Colorisation IA", type="primary"):
        process_with_ai(video_path, {
            'model_type': model_type,
            'quality': quality,
            'temporal_consistency': temporal_consistency,
            'enhance_faces': enhance_faces,
            'batch_size': batch_size,
            'color_intensity': color_intensity,
            'saturation_boost': saturation_boost
        })

def render_classical_colorization_tab(video_path: str):
    """Onglet de colorisation classique"""
    st.markdown("""
    <div class="processing-card">
        <h4>üé® Colorisation Classique</h4>
        <p>Colorisation bas√©e sur la segmentation d'objets et l'attribution manuelle de couleurs.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Extraction de la premi√®re frame pour pr√©visualisation
    cap = cv2.VideoCapture(video_path)
    ret, frame = cap.read()
    cap.release()
    
    if ret:
        # Segmentation pour pr√©visualisation
        try:
            colorizer = ClassicalColorizer()
            seg = colorizer.segment(frame)
            unique_classes = np.unique(seg)
            
            st.subheader("üîç Objets d√©tect√©s dans la premi√®re frame")
            
            # Afficher la frame segment√©e
            col1, col2 = st.columns(2)
            
            with col1:
                st.image(frame, caption="Frame originale", use_column_width=True)
            
            with col2:
                # Cr√©er une image de segmentation color√©e
                seg_colored = np.zeros_like(frame)
                colors = plt.cm.Set3(np.linspace(0, 1, len(unique_classes)))
                for i, class_idx in enumerate(unique_classes):
                    mask = seg == class_idx
                    seg_colored[mask] = (colors[i][:3] * 255).astype(np.uint8)
                
                st.image(seg_colored, caption="Segmentation", use_column_width=True)
            
            # Interface de s√©lection des couleurs
            st.subheader("üé® Attribution des couleurs")
            class_to_color = {}
            
            cols = st.columns(min(3, len(unique_classes)))
            for i, class_idx in enumerate(unique_classes):
                with cols[i % 3]:
                    class_name = COCO_CLASSES[class_idx] if class_idx < len(COCO_CLASSES) else f"Classe {class_idx}"
                    
                    # Couleur par d√©faut bas√©e sur la classe
                    default_colors = {
                        'person': '#FDB462',
                        'car': '#80B1D3',
                        'building': '#BEBADA',
                        'tree': '#98DF8A',
                        'sky': '#87CEEB',
                        'road': '#696969'
                    }
                    
                    default_color = default_colors.get(class_name.lower(), '#%02x%02x%02x' % tuple(np.random.randint(100, 255, 3)))
                    
                    color = st.color_picker(
                        f"{class_name}",
                        default_color,
                        key=f"color_{class_idx}"
                    )
                    
                    rgb = tuple(int(color.lstrip('#')[i:i+2], 16) for i in (0, 2, 4))
                    class_to_color[class_idx] = rgb
            
            # Options de colorisation classique
            with st.expander("‚öôÔ∏è Options Avanc√©es"):
                edge_smoothing = st.slider("Lissage des contours", 0, 10, 3)
                color_blending = st.slider("M√©lange des couleurs", 0.1, 1.0, 0.7, 0.1)
                preserve_details = st.checkbox("Pr√©server les d√©tails", True)
            
            if st.button("üé® Appliquer la Colorisation Classique", type="primary"):
                process_with_classical(video_path, class_to_color, {
                    'edge_smoothing': edge_smoothing,
                    'color_blending': color_blending,
                    'preserve_details': preserve_details
                })
                
        except Exception as e:
            st.error(f"Erreur lors de la segmentation: {e}")
    else:
        st.error("Impossible de lire la vid√©o.")

def render_preprocessing_tab(video_path: str):
    """Onglet de pr√©processing"""
    st.markdown("""
    <div class="processing-card">
        <h4>üîß Pr√©traitement et Restauration</h4>
        <p>Am√©liorez la qualit√© de votre vid√©o avant colorisation.</p>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üßπ D√©bruitage")
        denoising_method = st.selectbox(
            "M√©thode de d√©bruitage",
            ["Aucun", "Filtre m√©dian", "Filtre bilat√©ral", "Non-local means", "BM3D"]
        )
        
        if denoising_method != "Aucun":
            denoising_strength = st.slider("Intensit√© du d√©bruitage", 1, 10, 5)
        
        st.subheader("üìà Am√©lioration du contraste")
        contrast_method = st.selectbox(
            "M√©thode de contraste",
            ["Aucun", "CLAHE", "√âgalisation d'histogramme", "Gamma correction"]
        )
        
        if contrast_method != "Aucun":
            contrast_strength = st.slider("Intensit√© du contraste", 0.5, 2.0, 1.0, 0.1)
    
    with col2:
        st.subheader("üîç Am√©lioration de la nettet√©")
        sharpening = st.checkbox("Activer l'am√©lioration de nettet√©")
        
        if sharpening:
            sharpening_strength = st.slider("Intensit√© de la nettet√©", 0.1, 2.0, 1.0, 0.1)
        
        st.subheader("üìè Redimensionnement")
        resize_option = st.selectbox(
            "Redimensionnement",
            ["Aucun", "720p", "1080p", "4K", "Personnalis√©"]
        )
        
        if resize_option == "Personnalis√©":
            col_w, col_h = st.columns(2)
            with col_w:
                custom_width = st.number_input("Largeur", 100, 4000, 1920)
            with col_h:
                custom_height = st.number_input("Hauteur", 100, 4000, 1080)
    
    if st.button("üîß Appliquer le Pr√©traitement", type="primary"):
        preprocessing_params = {
            'denoising_method': denoising_method,
            'denoising_strength': denoising_strength if denoising_method != "Aucun" else 0,
            'contrast_method': contrast_method,
            'contrast_strength': contrast_strength if contrast_method != "Aucun" else 1.0,
            'sharpening': sharpening,
            'sharpening_strength': sharpening_strength if sharpening else 1.0,
            'resize_option': resize_option,
            'custom_width': custom_width if resize_option == "Personnalis√©" else None,
            'custom_height': custom_height if resize_option == "Personnalis√©" else None
        }
        process_preprocessing(video_path, preprocessing_params)

def process_with_ai(video_path: str, params: Dict):
    """Traitement avec IA"""
    progress_container = st.container()
    
    with progress_container:
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            status_text.text("üîÑ Initialisation du mod√®le IA...")
            progress_bar.progress(10)
            
            colorizer = AIColorizer()
            
            status_text.text("üé® Colorisation en cours...")
            progress_bar.progress(30)
            
            # Simuler le traitement progressif
            import time
            for i in range(30, 90, 10):
                time.sleep(1)
                progress_bar.progress(i)
                status_text.text(f"üé® Traitement... {i}%")
            
            output_path = colorizer.colorize(video_path)
            
            progress_bar.progress(95)
            status_text.text("üìä Calcul des m√©triques...")
            
            metrics = calculate_metrics(video_path, output_path)
            
            progress_bar.progress(100)
            status_text.text("‚úÖ Traitement termin√©!")
            
            # Sauvegarder dans l'historique
            save_processing_history(
                st.session_state.get('video_name', 'video'),
                f"IA - {params['model_type']}",
                metrics,
                output_path
            )
            
            # Afficher les r√©sultats
            display_results(output_path, metrics, "IA")
            
        except Exception as e:
            st.error(f"Erreur lors du traitement IA: {e}")
            progress_bar.empty()
            status_text.empty()

def process_with_classical(video_path: str, class_to_color: Dict, params: Dict):
    """Traitement avec m√©thode classique"""
    progress_container = st.container()
    
    with progress_container:
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            status_text.text("üîÑ Initialisation de la segmentation...")
            progress_bar.progress(20)
            
            colorizer = ClassicalColorizer()
            
            status_text.text("üé® Colorisation par segmentation...")
            progress_bar.progress(50)
            
            output_path = colorizer.colorize(video_path, class_to_color)
            
            progress_bar.progress(80)
            status_text.text("üìä Calcul des m√©triques...")
            
            metrics = calculate_metrics(video_path, output_path)
            
            progress_bar.progress(100)
            status_text.text("‚úÖ Traitement termin√©!")
            
            # Sauvegarder dans l'historique
            save_processing_history(
                st.session_state.get('video_name', 'video'),
                "Classique - Segmentation",
                metrics,
                output_path
            )
            
            # Afficher les r√©sultats
            display_results(output_path, metrics, "Classique")
            
        except Exception as e:
            st.error(f"Erreur lors du traitement classique: {e}")
            progress_bar.empty()
            status_text.empty()

def process_preprocessing(video_path: str, params: Dict):
    """Traitement de pr√©processing"""
    st.info("üîß Fonctionnalit√© de pr√©processing en cours de d√©veloppement...")

def display_results(output_path: str, metrics: Dict, method: str):
    """Affiche les r√©sultats du traitement"""
    st.markdown("---")
    st.subheader("üéâ R√©sultats du Traitement")
    
    # Vid√©o r√©sultante
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown(f"### üé¨ Vid√©o Coloris√©e ({method})")
        with st.container():
            st.markdown('<div class="video-container">', unsafe_allow_html=True)
            st.video(output_path)
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Bouton de t√©l√©chargement
        with open(output_path, 'rb') as f:
            st.download_button(
                label="üì• T√©l√©charger la vid√©o coloris√©e",
                data=f,
                file_name=f"colorized_{method.lower()}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4",
                mime="video/mp4",
                type="primary"
            )
    
    with col2:
        st.markdown("### üìä M√©triques de Qualit√©")
        
        # Cartes de m√©triques
        if metrics:
            st.markdown(f"""
            <div class="metric-card">
                <h4>PSNR</h4>
                <h2>{metrics.get('psnr', 0):.2f} dB</h2>
                <p>Rapport Signal/Bruit</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown(f"""
            <div class="metric-card">
                <h4>SSIM</h4>
                <h2>{metrics.get('ssim', 0):.3f}</h2>
                <p>Similarit√© Structurelle</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Indicateur de qualit√©
        if metrics and 'psnr' in metrics:
            psnr = metrics['psnr']
            if psnr > 25:
                quality = "Excellente üåü"
                color = "#28a745"
            elif psnr > 20:
                quality = "Bonne üëç"
                color = "#ffc107"
            else:
                quality = "Acceptable ‚ö†Ô∏è"
                color = "#dc3545"
            
            st.markdown(f"""
            <div style="background: {color}20; padding: 1rem; border-radius: 10px; border-left: 4px solid {color};">
                <h4 style="color: {color}; margin: 0;">Qualit√©: {quality}</h4>
            </div>
            """, unsafe_allow_html=True)

def render_history_page():
    """Page d'historique des traitements"""
    st.markdown("""
    <div class="main-header">
        <h1>üìö Historique des Traitements</h1>
        <p>Consultez vos traitements pr√©c√©dents et leurs m√©triques</p>
    </div>
    """, unsafe_allow_html=True)
    
    history = load_processing_history()
    
    if not history:
        st.info("üìù Aucun traitement dans l'historique.")
        return
    
    # Graphique des m√©triques
    chart = create_comparison_chart(history)
    if chart:
        st.plotly_chart(chart, use_container_width=True)
    
    # Tableau de l'historique
    st.subheader("üìã Historique D√©taill√©")
    
    for i, entry in enumerate(reversed(history[-20:])):  # 20 derni√®res entr√©es
        with st.expander(f"üé¨ {entry['video_name']} - {entry['method']} ({entry['timestamp'][:19]})"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.write(f"**M√©thode:** {entry['method']}")
                st.write(f"**Date:** {entry['timestamp'][:19]}")
            
            with col2:
                if entry.get('metrics'):
                    st.write(f"**PSNR:** {entry['metrics'].get('psnr', 'N/A'):.2f} dB")
                    st.write(f"**SSIM:** {entry['metrics'].get('ssim', 'N/A'):.3f}")
            
            with col3:
                if os.path.exists(entry['output_path']):
                    with open(entry['output_path'], 'rb') as f:
                        st.download_button(
                            "üì• T√©l√©charger",
                            data=f,
                            file_name=f"redownload_{i}.mp4",
                            mime="video/mp4"
                        )
                else:
                    st.write("‚ùå Fichier non disponible")

def render_help_page():
    """Page d'aide et documentation"""
    st.markdown("""
    <div class="main-header">
        <h1>‚ùì Aide et Documentation</h1>
        <p>Guide d'utilisation et conseils pour de meilleurs r√©sultats</p>
    </div>
    """, unsafe_allow_html=True)
    
    tab1, tab2, tab3, tab4 = st.tabs(["üöÄ D√©marrage Rapide", "ü§ñ IA vs Classique", "‚öôÔ∏è Param√®tres", "üîß D√©pannage"])
    
    with tab1:
        st.markdown("""
        ## üöÄ Guide de D√©marrage Rapide
        
        ### 1. Pr√©parez votre vid√©o
        - Format support√©: MP4, AVI, MOV, MKV
        - Taille maximum: 200MB
        - R√©solution recommand√©e: 720p-1080p
        
        ### 2. Choisissez votre m√©thode
        - **IA Avanc√©e**: Pour des r√©sultats automatiques et r√©alistes
        - **Classique**: Pour un contr√¥le pr√©cis des couleurs
        - **Pr√©processing**: Pour am√©liorer la qualit√© avant colorisation
        
        ### 3. Ajustez les param√®tres
        - Commencez avec les param√®tres par d√©faut
        - Ajustez selon vos besoins sp√©cifiques
        
        ### 4. T√©l√©chargez le r√©sultat
        - Comparez les m√©triques PSNR/SSIM
        - T√©l√©chargez votre vid√©o coloris√©e
        """)
    
    with tab2:
        st.markdown("""
        ## ü§ñ Comparaison des M√©thodes
        
        | Aspect | IA Avanc√©e | Classique |
        |--------|------------|-----------|
        | **Facilit√©** | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Automatique | ‚≠ê‚≠ê‚≠ê Manuel |
        | **R√©alisme** | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Tr√®s r√©aliste | ‚≠ê‚≠ê‚≠ê Contr√¥l√© |
        | **Vitesse** | ‚≠ê‚≠ê‚≠ê Moyenne | ‚≠ê‚≠ê‚≠ê‚≠ê Rapide |
        | **Contr√¥le** | ‚≠ê‚≠ê Limit√© | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Total |
        | **Visages** | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Excellent | ‚≠ê‚≠ê‚≠ê Bon |
        | **Paysages** | ‚≠ê‚≠ê‚≠ê‚≠ê Tr√®s bon | ‚≠ê‚≠ê‚≠ê‚≠ê Bon |
        
        ### Quand utiliser l'IA ?
        - Vid√©os avec des personnes
        - Sc√®nes complexes
        - Recherche de r√©alisme maximum
        
        ### Quand utiliser la m√©thode classique ?
        - Besoin de couleurs sp√©cifiques
        - Objets aux couleurs non-naturelles
        - Contr√¥le artistique pr√©cis
        """)
    
    with tab3:
        st.markdown("""
        ## ‚öôÔ∏è Guide des Param√®tres
        
        ### Param√®tres IA
        - **Mod√®le**: 
          - *Stable*: Meilleur pour les visages
          - *Artistic*: Plus cr√©atif pour les paysages
        - **Qualit√©**: Balance vitesse/qualit√©
        - **Coh√©rence temporelle**: √âvite le scintillement
        - **Batch size**: Plus √©lev√© = plus rapide (mais plus de m√©moire)
        
        ### Param√®tres Classiques
        - **Lissage des contours**: R√©duit les artefacts aux bordures
        - **M√©lange des couleurs**: Transition douce entre zones
        - **Pr√©server les d√©tails**: Maintient la nettet√© originale
        
        ### M√©triques de Qualit√©
        - **PSNR > 25 dB**: Excellente qualit√©
        - **PSNR 20-25 dB**: Bonne qualit√©
        - **SSIM > 0.8**: Tr√®s bonne similarit√© structurelle
        """)
    
    with tab4:
        st.markdown("""
        ## üîß D√©pannage
        
        ### Probl√®mes Courants
        
        **‚ùå "Erreur de chargement de vid√©o"**
        - V√©rifiez le format (MP4 recommand√©)
        - R√©duisez la taille du fichier
        - Essayez un autre navigateur
        
        **‚ùå "Traitement tr√®s lent"**
        - R√©duisez la r√©solution de la vid√©o
        - Diminuez le batch size
        - Utilisez la qualit√© "Rapide"
        
        **‚ùå "Couleurs non r√©alistes"**
        - Essayez le mod√®le "Stable" au lieu d'"Artistic"
        - Activez l'am√©lioration des visages
        - Ajustez l'intensit√© des couleurs
        
        **‚ùå "Scintillement dans la vid√©o"**
        - Activez la coh√©rence temporelle
        - Augmentez le lissage temporel
        - R√©duisez l'intensit√© des couleurs
        
        ### Contact Support
        Si le probl√®me persiste, v√©rifiez les logs dans la console du navigateur (F12).
        """)

def main():
    """Fonction principale de l'application"""
    # Charger le CSS personnalis√©
    load_custom_css()
    
    # Navigation principale
    with st.sidebar:
        st.image("https://via.placeholder.com/200x80/667eea/white?text=AI+Studio", use_column_width=True)
        
        selected = option_menu(
            menu_title="Navigation",
            options=["üé® Colorisation", "üìö Historique", "‚ùì Aide"],
            icons=["palette", "clock-history", "question-circle"],
            menu_icon="cast",
            default_index=0,
            styles={
                "container": {"padding": "0!important", "background-color": "#fafafa"},
                "icon": {"color": "#667eea", "font-size": "18px"},
                "nav-link": {
                    "font-size": "16px",
                    "text-align": "left",
                    "margin": "0px",
                    "--hover-color": "#eee",
                },
                "nav-link-selected": {"background-color": "#667eea"},
            },
        )
    
    # Affichage des pages selon la s√©lection
    if selected == "üé® Colorisation":
        render_main_interface()
    elif selected == "üìö Historique":
        render_history_page()
    elif selected == "‚ùì Aide":
        render_help_page()

if __name__ == "__main__":
    main()
