#!/usr/bin/env python3
"""
Point d'entr√©e principal pour la restauration et colorisation de vid√©os anciennes.
Support pour les approches classiques et IA avec interface graphique.
"""

import argparse
import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.append(str(Path(__file__).parent / 'src'))

from classical.video_restoration import ClassicalRestoration
from ai.gan_colorization import GANColorization
from gui.main_window import VideoRestorationApp
from utils.video_utils import VideoProcessor
from evaluation.metrics import VideoMetrics

def parse_arguments():
    """Parse les arguments de ligne de commande."""
    parser = argparse.ArgumentParser(
        description="Restauration et colorisation de vid√©os anciennes"
    )
    
    parser.add_argument(
        '--input', '-i',
        type=str,
        required=True,
        help="Chemin vers la vid√©o d'entr√©e"
    )
    
    parser.add_argument(
        '--output', '-o',
        type=str,
        help="Chemin vers la vid√©o de sortie (optionnel)"
    )
    
    parser.add_argument(
        '--method',
        choices=['classical', 'ai', 'both'],
        default='both',
        help="M√©thode de restauration √† utiliser"
    )
    
    parser.add_argument(
        '--gui',
        action='store_true',
        help="Lancer l'interface graphique"
    )
    
    parser.add_argument(
        '--evaluate',
        action='store_true',
        help="√âvaluer les r√©sultats avec PSNR/SSIM"
    )
    
    return parser.parse_args()

def process_video_classical(input_path: str, output_path: str) -> str:
    """Traite la vid√©o avec les m√©thodes classiques."""
    print("üîß Traitement avec m√©thodes classiques...")
    
    restoration = ClassicalRestoration()
    processor = VideoProcessor(input_path)
    
    # D√©bruitage spatio-temporel
    denoised_frames = restoration.denoise_video(processor.frames)
    
    # Colorisation semi-automatique
    colorized_frames = restoration.colorize_video(denoised_frames)
    
    # Sauvegarde
    output_classical = output_path.replace('.mp4', '_classical.mp4')
    processor.save_video(colorized_frames, output_classical)
    
    print(f"‚úÖ Restauration classique termin√©e : {output_classical}")
    return output_classical

def process_video_ai(input_path: str, output_path: str) -> str:
    """Traite la vid√©o avec les m√©thodes IA."""
    print("ü§ñ Traitement avec m√©thodes IA...")
    
    gan_colorizer = GANColorization()
    processor = VideoProcessor(input_path)
    
    # Colorisation GAN
    colorized_frames = gan_colorizer.colorize_video(processor.frames)
    
    # Sauvegarde
    output_ai = output_path.replace('.mp4', '_ai.mp4')
    processor.save_video(colorized_frames, output_ai)
    
    print(f"‚úÖ Restauration IA termin√©e : {output_ai}")
    return output_ai

def evaluate_results(original_path: str, restored_paths: list):
    """√âvalue les r√©sultats avec les m√©triques PSNR/SSIM."""
    print("üìä √âvaluation des r√©sultats...")
    
    metrics = VideoMetrics()
    results = {}
    
    for method, path in restored_paths.items():
        if os.path.exists(path):
            psnr, ssim = metrics.compare_videos(original_path, path)
            results[method] = {'PSNR': psnr, 'SSIM': ssim}
            print(f"üìà {method.upper()}: PSNR={psnr:.2f}dB, SSIM={ssim:.4f}")
    
    # Sauvegarder les r√©sultats
    metrics.save_results(results, 'results/evaluation_results.json')
    return results

def main():
    """Fonction principale."""
    args = parse_arguments()
    
    # V√©rifier que le fichier d'entr√©e existe
    if not os.path.exists(args.input):
        print(f"‚ùå Erreur: Le fichier {args.input} n'existe pas")
        return 1
    
    # Lancer l'interface graphique si demand√©
    if args.gui:
        from PyQt5.QtWidgets import QApplication
        app = QApplication(sys.argv)
        window = VideoRestorationApp()
        window.show()
        return app.exec_()
      # Traitement en ligne de commande
    if not args.output:
        base_name = Path(args.input).stem
        args.output = f"data/output/{base_name}_restored.mp4"
    
    # Cr√©er les r√©pertoires de sortie
    output_dir = os.path.dirname(args.output)
    if output_dir:  # Only create directory if there's a path
        os.makedirs(output_dir, exist_ok=True)
    os.makedirs('results', exist_ok=True)
    
    restored_paths = {}
    
    # Traitement selon la m√©thode choisie
    if args.method in ['classical', 'both']:
        restored_paths['classical'] = process_video_classical(args.input, args.output)
    
    if args.method in ['ai', 'both']:
        restored_paths['ai'] = process_video_ai(args.input, args.output)
    
    # √âvaluation si demand√©e
    if args.evaluate and restored_paths:
        evaluate_results(args.input, restored_paths)
    
    print("üéâ Traitement termin√© avec succ√®s!")
    return 0

if __name__ == "__main__":
    sys.exit(main())
