#!/usr/bin/env python3
"""
Script de validation des am√©liorations du projet de restauration vid√©o.
Teste les nouvelles fonctionnalit√©s impl√©ment√©es.
"""

import sys
import os
import numpy as np
import cv2

# Ajouter le r√©pertoire src au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_imports():
    """Test que tous les modules peuvent √™tre import√©s correctement."""
    print("üß™ Test d'importation des modules...")
    
    try:
        # Test des modules classiques
        from src.classical.video_restoration import ClassicalRestoration
        print("‚úÖ Module classique import√© avec succ√®s")
        
        # Test des modules IA
        from src.ai.gan_colorization import GANColorization
        from src.ai.deoldify_enhanced import EnhancedDeOldifyColorizer
        from src.ai.zhang_restoration import ZhangVideoRestorer
        print("‚úÖ Modules IA import√©s avec succ√®s")
        
        # Test des modules utilitaires
        from src.utils.gpu_acceleration import AccelerationManager
        from src.utils.performance import OptimizedVideoProcessor
        print("‚úÖ Modules utilitaires import√©s avec succ√®s")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'importation: {e}")
        return False

def test_initialization():
    """Test que les classes peuvent √™tre initialis√©es."""
    print("\nüîß Test d'initialisation des classes...")
      try:
        # Test de la restauration classique
        from src.classical.video_restoration import ClassicalRestoration
        classical_restorer = ClassicalRestoration()
        print("‚úÖ ClassicalRestoration initialis√©")
        
        # Test du coloriseur GAN
        from src.ai.gan_colorization import GANColorization
        gan_colorizer = GANColorization()
        print("‚úÖ GANColorization initialis√©")
        
        # Test du coloriseur DeOldify am√©lior√©
        from src.ai.deoldify_enhanced import EnhancedDeOldifyColorizer
        deoldify_colorizer = EnhancedDeOldifyColorizer()
        print("‚úÖ EnhancedDeOldifyColorizer initialis√©")
          # Test du restaurateur Zhang
        from src.ai.zhang_restoration import ZhangVideoRestoration
        zhang_restorer = ZhangVideoRestoration()
        print("‚úÖ ZhangVideoRestoration initialis√©")
        
        # Test des utilitaires
        from src.utils.gpu_acceleration import AccelerationManager
        from src.utils.performance import OptimizedVideoProcessor
        
        acceleration_manager = AccelerationManager()
        print("‚úÖ AccelerationManager initialis√©")
        
        optimized_processor = OptimizedVideoProcessor()
        print("‚úÖ OptimizedVideoProcessor initialis√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur d'initialisation: {e}")
        return False

def test_new_methods():
    """Test des nouvelles m√©thodes impl√©ment√©es."""
    print("\nüÜï Test des nouvelles m√©thodes...")
    
    try:
        # Cr√©er une frame de test
        test_frame = np.random.randint(0, 255, (100, 100), dtype=np.uint8)
        test_frames = [test_frame] * 3  # 3 frames pour tester la coh√©rence temporelle
          # Test de la colorisation semi-automatique de Levin
        from src.classical.video_restoration import ClassicalRestoration
        classical_restorer = ClassicalRestoration()
        
        # V√©rifier que la m√©thode de Levin existe
        assert hasattr(classical_restorer, 'levin_colorization'), "M√©thode de Levin manquante"
        print("‚úÖ M√©thode de colorisation de Levin disponible")
        
        # Test du GAN avec optimisations
        from src.ai.gan_colorization import GANColorization
        gan_colorizer = GANColorization()
        
        # V√©rifier les optimisations
        assert hasattr(gan_colorizer, 'acceleration_manager'), "Gestionnaire d'acc√©l√©ration manquant"
        print("‚úÖ Optimisations GPU disponibles")
        
        # Test de DeOldify am√©lior√©
        from src.ai.deoldify_enhanced import EnhancedDeOldifyColorizer
        deoldify_colorizer = EnhancedDeOldifyColorizer()
        
        # V√©rifier les mod√®les Zhang et al.
        assert hasattr(deoldify_colorizer, 'video_restorer'), "Restaurateur vid√©o manquant"
        print("‚úÖ Mod√®les Zhang et al. int√©gr√©s")
          # Test de la coh√©rence temporelle
        from src.ai.zhang_restoration import ZhangVideoRestoration
        zhang_restorer = ZhangVideoRestoration()
        
        assert hasattr(zhang_restorer, 'temporal_consistency_network'), "R√©seau de coh√©rence temporelle manquant"
        print("‚úÖ R√©seau de coh√©rence temporelle disponible")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des nouvelles m√©thodes: {e}")
        return False

def test_integration():
    """Test d'int√©gration basique."""
    print("\nüîó Test d'int√©gration...")
    
    try:
        # Cr√©er une frame de test simple
        test_frame = np.ones((64, 64), dtype=np.uint8) * 128  # Frame grise uniforme
        
        # Test de colorisation avec DeOldify am√©lior√©
        from src.ai.deoldify_enhanced import EnhancedDeOldifyColorizer
        colorizer = EnhancedDeOldifyColorizer()
        
        # Test de colorisation d'une frame
        colorized_frame = colorizer.colorize_frame(test_frame)
        assert colorized_frame.shape == (64, 64, 3), f"Forme incorrecte: {colorized_frame.shape}"
        print("‚úÖ Colorisation d'une frame r√©ussie")
        
        # Test avec plusieurs frames (version simplifi√©e)
        test_frames = [test_frame] * 2  # Seulement 2 frames pour un test rapide
        colorized_frames = colorizer.restore_and_colorize_video(test_frames)
        assert len(colorized_frames) == 2, f"Nombre de frames incorrect: {len(colorized_frames)}"
        print("‚úÖ Colorisation vid√©o r√©ussie")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur d'int√©gration: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale de validation."""
    print("üöÄ Validation des am√©liorations du projet de restauration vid√©o")
    print("=" * 60)
    
    tests_results = []
    
    # Ex√©cuter les tests
    tests_results.append(("Importation", test_imports()))
    tests_results.append(("Initialisation", test_initialization()))
    tests_results.append(("Nouvelles m√©thodes", test_new_methods()))
    tests_results.append(("Int√©gration", test_integration()))
    
    # R√©sum√© des r√©sultats
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS:")
    
    all_passed = True
    for test_name, passed in tests_results:
        status = "‚úÖ PASS√â" if passed else "‚ùå √âCHEC"
        print(f"  {test_name}: {status}")
        if not passed:
            all_passed = False
    
    print("\n" + "=" * 60)
    if all_passed:
        print("üéâ TOUS LES TESTS SONT PASS√âS!")
        print("‚ú® Le projet est pr√™t avec les nouvelles fonctionnalit√©s:")
        print("   - Colorisation semi-automatique selon Levin et al. (2004)")
        print("   - Int√©gration DeOldify (Jason Antic, 2019)")
        print("   - Techniques Zhang et al. (CVPR 2020)")
        print("   - Optimisations GPU et performances")
        print("   - Coh√©rence temporelle am√©lior√©e")
    else:
        print("‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
        print("üîß Veuillez corriger les erreurs avant de continuer")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
